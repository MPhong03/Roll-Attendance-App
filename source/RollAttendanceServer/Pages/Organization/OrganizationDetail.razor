<MudDialog MaxWidth="MaxWidth.Medium">
    <DialogContent>
        @if (_selectedOrganization != null)
        {
            <MudGrid>
                <MudItem xs="12">
                    <MudText Typo="Typo.h5" Class="mb-2">@_selectedOrganization.Name</MudText>
                    <MudText>@_selectedOrganization.Description</MudText>
                    <MudText><strong>Address:</strong> @_selectedOrganization.Address</MudText>
                    <MudText><strong>Private:</strong> @_selectedOrganization.IsPrivate</MudText>
                </MudItem>

                <MudItem xs="12" Class="mt-4">
                    <MudText Typo="Typo.h6" Class="mb-2">Events</MudText>
                    <MudTable ServerData="@LoadEvents" Elevation="1" Dense="true" Class="mb-4">
                        <HeaderContent>
                            <MudTh>Name</MudTh>
                            <MudTh>Start Time</MudTh>
                            <MudTh>End Time</MudTh>
                            <MudTh>Status</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd>@context.Name</MudTd>
                            <MudTd>@context.StartTime?.ToString("g")</MudTd>
                            <MudTd>@context.EndTime?.ToString("g")</MudTd>
                            <MudTd>@context.EventStatus</MudTd>
                        </RowTemplate>
                        <PagerContent>
                            <MudTablePager />
                        </PagerContent>
                    </MudTable>
                </MudItem>

                @* <MudItem xs="12">
                    <MudText Typo="Typo.h6" Class="mb-2">Members</MudText>
                    <MudTable ServerData="@LoadMembers" Elevation="1" Dense="true">
                        <HeaderContent>
                            <MudTh>Name</MudTh>
                            <MudTh>Email</MudTh>
                            <MudTh>Phone</MudTh>
                            <MudTh>Role</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd>@context.DisplayName</MudTd>
                            <MudTd>@context.Email</MudTd>
                            <MudTd>@context.PhoneNumber</MudTd>
                            <MudTd>@context.Role</MudTd>
                        </RowTemplate>
                        <PagerContent>
                            <MudTablePager />
                        </PagerContent>
                    </MudTable>
                </MudItem> *@
            </MudGrid>
        }
        else
        {
            <MudText Typo="Typo.h6" Color="Color.Error">Organization not found.</MudText>
        }
    </DialogContent>
</MudDialog>

@code {
    [Parameter] public string OrganizationId { get; set; }

    private Organization? _selectedOrganization;
    private bool _isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        Debug.WriteLine("ID: " + OrganizationId);
        _isLoading = true;
        _selectedOrganization = await _organizationService.GetOrganizationByIdAsync(OrganizationId);
        Debug.WriteLine("SUCCESS? " + _selectedOrganization);
        _isLoading = false;
    }

    private async Task<TableData<Event>> LoadEvents(TableState state)
    {
        if (_selectedOrganization == null) return new TableData<Event> { Items = new List<Event>(), TotalItems = 0 };

        var events = await _eventService.GetEventsByOrganizationAsync(
            _selectedOrganization.Id,
            string.Empty,
            null,
            null,
            state.Page + 1,
            state.PageSize
        ).ConfigureAwait(false);
        return new TableData<Event>
            {
                Items = events.ToList(),
                TotalItems = events.Count()
            };
    }

    // private async Task<TableData<UserOrganizationDTO?>> LoadMembers(TableState state)
    // {
    //     if (_selectedOrganization == null) return new TableData<UserOrganizationDTO?> { Items = new List<UserOrganizationDTO?>(), TotalItems = 0 };

    //     var members = await _organizationService.GetOrganizationUsersAsync(
    //         _selectedOrganization.Id,
    //         string.Empty,
    //         state.Page,
    //         state.PageSize
    //     ).ConfigureAwait(false);
    //     return new TableData<UserOrganizationDTO?>
    //         {
    //             Items = members.ToList(),
    //             TotalItems = members.Count()
    //         };
    // }
}
